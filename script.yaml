esphome:
  name: "esp32-door"
  platform: ESP32
  board: esp32dev

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  password: !secret ota_password_door

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: !secret hotspot_ssid_door
    password: !secret hotspot_password_door

captive_portal:

web_server:
  port: 80
  auth:
    username: admin
    password: admin

switch:
  - platform: gpio
    pin: GPIO12
    name: door_opener
    id: door_opener_switch
    icon: "mdi:lock-open-outline"
  - platform: gpio
    pin: GPIO14
    id: my_led

number:
  - platform: template
    name: buzzer_duration
    id: buzzer_duration_input
    min_value: 1
    max_value: 10
    step: 1
    restore_value: yes
    set_action:
      - lambda: |-
          id(buzzer_duration_input).publish_state(x);
  - platform: template
    name: wait_duration
    id: wait_duration_input
    min_value: 1
    max_value: 60
    step: 1
    restore_value: yes
    set_action:
      - lambda: |-
          id(wait_duration_input).publish_state(x);

button:
  - platform: template
    name: "Door Buzzer"
    on_press:
      - switch.turn_on: door_opener_switch
      - delay: !lambda 'return id(buzzer_duration_input).state * 1000;'
      - switch.turn_off: door_opener_switch
      - delay: !lambda 'return id(wait_duration_input).state * 1000;'
      - switch.turn_on: door_opener_switch
      - delay: !lambda 'return id(buzzer_duration_input).state * 1000;'
      - switch.turn_off: door_opener_switch

# Define the button input
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO27
      mode: INPUT_PULLUP
      inverted: True
    name: "My Button"
    on_press:
      then:
        # if the led is on, skip the rest of the actions
        - if:
            condition:
              switch.is_on: my_led
            then:
              - logger.log: "LED is already on, skipping"
            else:
              - logger.log: "LED is off, turning on"
              - switch.turn_on: my_led
              - delay: 5000ms
              - switch.turn_off: my_led
