esphome:
  name: "esp32-door"
  platform: ESP32
  board: esp32dev

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  password: "1a5deb66ea7f07a4132e279cbef78846"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-D20E68"
    password: "MW4cbEgw2Fzi"

captive_portal:

web_server:
  port: 80
  auth:
    username: admin
    password: admin

switch:
  - platform: gpio
    pin: GPIO12
    name: door_opener
    id: door_opener_switch
    icon: "mdi:lock-open-outline"

# Define variables for button state and timer
globals:
  - id: door_button_state
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: buzzer_duration
    type: int
    restore_value: yes
    initial_value: '0'

  - id: wait_duration
    type: int
    restore_value: yes
    initial_value: '0'

number:
  - platform: template
    name: buzzer_duration
    id: buzzer_duration_input
    min_value: 1
    max_value: 10
    step: 1
    set_action:
      - lambda: |-
          id(buzzer_duration) = x;
  - platform: template
    name: wait_duration
    id: wait_duration_input
    min_value: 1
    max_value: 60
    step: 1
    set_action:
      - lambda: |-
          id(wait_duration) = x;

button:
  - platform: template
    name: "Door Buzzer"
    on_press:
      - switch.turn_on: door_opener_switch
      - delay: !lambda 'return id(buzzer_duration_input).state;'
      - switch.turn_off: door_opener_switch
      - delay: !lambda 'return id(wait_duration_input).state;'
      - switch.turn_on: door_opener_switch
      - delay: !lambda 'return id(buzzer_duration_input).state;'
      - switch.turn_off: door_opener_switch
